##Enable Logging
###Process CommandLine Logging
Step 1: Enable Process Creation Auditing (Event ID 4688)
Open Group Policy Editor:

Press Win + R, type gpedit.msc, and press Enter.
Navigate to the Audit Policy Settings:

Go to:
Computer Configuration → Windows Settings → Security Settings → Advanced Audit Policy Configuration → System Audit Policies - Local Group Policy Object → Detailed Tracking.
Enable Process Creation Logging:

Find "Audit Process Creation" on the right panel.
Double-click it.
Select "Configure the following audit events".
Check Success and Failure.
Click Apply and OK.

Step 2: Enable Command Line Logging
Navigate to the Command Line Logging Setting:

In Group Policy Editor, go to:
Computer Configuration → Administrative Templates → System → Audit Process Creation.
Enable Logging of Command Line Arguments:

Find "Include command line in process creation events".
Double-click it.
Select "Enabled".
Click Apply and OK.

#####################################################################
##Enable PowerShell Logging

### GUI GPO Editor
Using Group Policy Editor (GPO)
Open the Group Policy Editor:

    Press Win + R, type gpedit.msc, and hit Enter.
    Navigate to PowerShell Logging Settings:

    Go to Computer Configuration → Administrative Templates → Windows Components → Windows PowerShell.
    Right-Click → Edit, Select Enable (for the top 4 items in directory)

#######################################################################

###### Events that will be captured
Event ID	Event Name	Description	Log Location
4688	A new process has been created  //Captures process creation, including command-line arguments when enabled//	Security Log
4103	PowerShell Module Logging	//Logs PowerShell modules that are loaded and used//	Microsoft-Windows-PowerShell/Operational
4104	PowerShell Script Block Logging	//Logs executed script blocks, including deobfuscated scripts//	Microsoft-Windows-PowerShell/Operational
4105	PowerShell Command Start	//Captures the start of PowerShell command execution//	Microsoft-Windows-PowerShell/Operational
4106	PowerShell Command End	//Captures the end of PowerShell command execution//	Microsoft-Windows-PowerShell/Operational

##Transcription Log Defaults to
C:\Users\<User>\Documents\PowerShell_Transcripts\


##PowerShell Download Techniques
#1
powershell -c 'Invoke-WebRequest -Uri "https://www.google.com/logos/2024/popcorn/rc4/cta.png" -OutFile "C:\test-invoke-webrequest.png"; Invoke-RestMethod -Uri "https://www.google.com/logos/2024/popcorn/rc4/cta.png" -OutFile "C:\test-invoke-restmethod.png"; Start-BitsTransfer -Source "https://www.google.com/logos/2024/popcorn/rc4/cta.png" -Destination "C:\test-start-bitstransfer.png"; $webClient=New-Object System.Net.WebClient;$webClient.DownloadFile(\"https://www.google.com/logos/2024/popcorn/rc4/cta.png\", \"C:\test-webclient.png\")'

#2
powershell -c {$fileUrl="https://www.google.com/logos/2024/popcorn/rc4/cta.png"; Invoke-WebRequest -Uri $fileUrl -OutFile "C:\test-invoke-webrequest.png"; Invoke-RestMethod -Uri $fileUrl -OutFile "C:\test-invoke-restmethod.png"; Start-BitsTransfer -Source $fileUrl -Destination "C:\test-start-bitstransfer.png"; $webClient=New-Object System.Net.WebClient;$webClient.DownloadFile($fileUrl, "C:\test-webclient.png")}

####Resources
https://start.me/p/wMrA5z/cyber-threat-intelligence [Threat Intel Source / News Feed]
https://attack.mitre.org/ [Cyber Attack Methodology]
https://lolbas-project.github.io/ [Lay of the Land Binaries / Attack with what you got]
https://d3fend.mitre.org/ [Cyber Defense Controls]
https://docs.google.com/spreadsheets/d/1H9_xaxQHpWaa4O_Son4Gx0YOIzlcBWMsdvePFX68EKU/edit?gid=1636225066#gid=1636225066   [Threat Actors]
https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/default.aspx [Windows Logs]
https://book.hacktricks.wiki/en/index.html [HowTo's Hacking / Defending]
https://www.exploit-db.com/ [Exploit Database / Research]
